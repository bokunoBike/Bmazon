版权页： 
 
 
（3）在Orders表添加一行，它与顾客ID相关联； 
（4）检索Orders表中赋予的新订单ID； 
（5）为订购的每个物品在OrderItems表中添加一行，通过检索出来的ID把它与Orders表关联（并且通过产品Ⅲ与Products表关联）。 
现在假设由于某种数据库故障（如超出磁盘空间、安全限制、表锁等），这个过程无法完成。数据库中的数据会出现什么情况？ 
如果故障发生在添加顾客之后，添加Orders表之前，则不会有什么问题。某些顾客没有订单是完全合法的。重新执行此过程时，所插入的顾客记录将被检索和使用。可以有效地从出故障的地方开始执行此过程。 
但是，如果故障发生在插入Orders行之后，添加OrderItems行之前，怎么办？现在，数据库中有一个空订单。 
更糟的是，如果系统在添加OrderItems行之时出现故障，怎么办？结果是数据库中存在不完整的订单，而你还不知道。 
如何解决这种问题？这就需要使用事务处理了。事务处理是一种机制，用来管理必须成批执行的SQL操作，保证数据库不包含不完整的操作结果。利用事务处理，可以保证一组操作不会中途停止，它们要么完全执行，要么完全不执行（除非明确指示）。如果没有错误发生，整组语句提交给（写到）数据库表；如果发生错误，则进行回退（撤销），将数据库恢复到某个已知且安全的状态。 
再看这个例子，这次我们说明这一过程是如何工作的： 
（1）检查数据库中是否存在相应的顾客，如果不存在，添加他； 
（2）提交顾客信息； 
（4）在Orders表中添加一行； 
（5）如果向Orders表添加行时出现故障，回退； 
（6）检索Orders表中赋予的新订单ID； 
（7）对于订购的每项物品，添加新行到OrderItems表； 
（8）如果向OrderItems添加行时出现故障，回退所有添加的OrderItems行和Orders行。 
在使用事务处理时，有几个反复出现的关键词。下面是关于事务处理需要知道的几个术语： 
事务（transaction）指一组SQL语句； 
回退（rollback）指撤销指定SQL语句的过程； 
提交（commit）指将未存储的SQL语句结果写入数据库表； 
保留点（savepoint）指事务处理中设置的临时占位符（placeholder），可以对它发布回退（与回退整个事务处理不同）。                                 --此文字指 